# Context for LLM: Functions and Framework for Coin Toss Probability Problems

# Description:
# This framework is designed to solve probability problems involving coin tosses.
# It provides functions for defining coin toss outcomes, calculating probabilities for specific events,
# and querying specific questions related to coin toss scenarios.

import itertools
from math import comb

# Define outcomes for a single coin toss
COIN_OUTCOMES = ['H', 'T']  # H for heads, T for tails

# Function to generate all possible outcomes for n coin tosses
def generate_outcomes(n):
    """Generates all possible outcomes for n coin tosses."""
    return list(itertools.product(COIN_OUTCOMES, repeat=n))

# Function to calculate the probability of an event
def calculate_probability(event_count, total_outcomes):
    """Calculates the probability of an event occurring."""
    return event_count / total_outcomes

# Function to find the probability of getting at least one head
def probability_at_least_one_head(tosses):
    """Calculates the probability of getting at least one head in 'tosses' tosses."""
    total_outcomes = 2 ** tosses  # Total outcomes for n tosses
    no_heads_outcomes = 1  # Only one outcome where all tosses are tails (T, T, ..., T)
    at_least_one_head = total_outcomes - no_heads_outcomes
    return calculate_probability(at_least_one_head, total_outcomes)

# Function to find the probability of getting exactly k heads in n tosses
def probability_exactly_k_heads(n, k):
    """Calculates the probability of getting exactly k heads in n tosses."""
    total_outcomes = 2 ** n
    favorable_outcomes = comb(n, k)  # nCk combinations of selecting k heads from n tosses
    return calculate_probability(favorable_outcomes, total_outcomes)

# Function to find the probability of getting all tails in n tosses
def probability_all_tails(n):
    """Calculates the probability of getting all tails in n tosses."""
    return calculate_probability(1, 2 ** n)  # Only one outcome with all tails

# Function to find the probability of getting exactly k tails in n tosses
def probability_exactly_k_tails(n, k):
    """Calculates the probability of getting exactly k tails in n tosses."""
    return probability_exactly_k_heads(n, k)  # Symmetric to heads

# Example queries
if __name__ == "__main__":
    # Q1: What is the probability of getting at least one head in two tosses?
    print("Probability of at least one head in 2 tosses:", probability_at_least_one_head(2))  # 3/4

    # Q2: What is the probability of getting exactly two heads in three tosses?
    print("Probability of exactly 2 heads in 3 tosses:", probability_exactly_k_heads(3, 2))  # 3/8

    # Q3: What is the probability of getting tails twice in a row in two tosses?
    print("Probability of 2 tails in 2 tosses:", probability_all_tails(2))  # 1/4

    # Q4: What is the probability of getting at least one tail in four tosses?
    print("Probability of at least one tail in 4 tosses:", 1 - probability_all_tails(4))  # 15/16

    # Q5: What is the probability of getting exactly three tails in five tosses?
    print("Probability of exactly 3 tails in 5 tosses:", probability_exactly_k_tails(5, 3))  # 10/32