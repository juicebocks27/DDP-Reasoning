# Context for LLM: Generic Probability Functions for Deck of Cards

# Description:
# This framework is designed to solve generic probability problems involving a standard deck of 52 playing cards.
# It provides reusable functions for calculating probabilities involving events like AND, OR, EITHER, NEITHER, and
# drawing multiple cards simultaneously.

from math import comb

# Define constants for a standard deck of 52 cards
TOTAL_CARDS = 52
SUITS = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']

# Function to calculate the probability of an event
def calculate_probability(event_count, total_outcomes):
    """Calculates the probability of an event occurring."""
    return event_count / total_outcomes

# Function for "AND" probability (intersection of events)
def probability_and(event1_count, event2_count, overlap_count, total_outcomes):
    """Calculates the probability of both Event 1 and Event 2 occurring."""
    return calculate_probability(event1_count + event2_count - overlap_count, total_outcomes)

# Function for "OR" probability (union of events)
def probability_or(event1_count, event2_count, overlap_count, total_outcomes):
    """Calculates the probability of either Event 1 or Event 2 occurring."""
    return calculate_probability(event1_count + event2_count - overlap_count, total_outcomes)

# Function for "EITHER" probability
def probability_either(event1_count, event2_count, overlap_count, total_outcomes):
    """Calculates the probability of exactly one of Event 1 or Event 2 occurring."""
    return calculate_probability(event1_count + event2_count - 2 * overlap_count, total_outcomes)

# Function for "NEITHER" probability
def probability_neither(event1_count, event2_count, overlap_count, total_outcomes):
    """Calculates the probability of neither Event 1 nor Event 2 occurring."""
    event_probability = probability_or(event1_count, event2_count, overlap_count, total_outcomes)
    return 1 - event_probability

# Function for drawing two specific cards simultaneously
def probability_two_specific_cards(card1_count, card2_count, overlap_count):
    """Calculates the probability of drawing two specific cards without replacement."""
    favorable_outcomes = comb(card1_count, 1) * comb(card2_count, 1)
    total_outcomes = comb(TOTAL_CARDS, 2)
    return calculate_probability(favorable_outcomes - overlap_count, total_outcomes)

# Function for generic simultaneous draws (k cards)
def probability_k_cards(favorable_count, total_cards, k):
    """Calculates the probability of drawing k specific cards simultaneously."""
    favorable_outcomes = comb(favorable_count, k)
    total_outcomes = comb(total_cards, k)
    return calculate_probability(favorable_outcomes, total_outcomes)

# Function to calculate overlap count based on suits and ranks
def calculate_overlap_count(rank_overlap, suit_overlap):
    """Calculates the overlap count for events based on rank and suit overlap."""
    return rank_overlap * suit_overlap

# Example Queries for Generic Probability
if __name__ == "__main__":
    # Q1: Probability of both a king and a spade
    king_count = 4
    spade_count = 13
    overlap_count = 1  # King of Spades
    print("Probability of king and spade:", probability_and(king_count, spade_count, overlap_count, TOTAL_CARDS))

    # Q2: Probability of either a queen or a jack
    queen_count = 4
    jack_count = 4
    overlap_count = 0  # No card is both a queen and a jack
    print("Probability of queen or jack:", probability_or(queen_count, jack_count, overlap_count, TOTAL_CARDS))

    # Q3: Probability of neither a king nor a spade
    print("Probability of neither king nor spade:", probability_neither(king_count, spade_count, overlap_count, TOTAL_CARDS))

    # Q4: Probability of exactly one being a king or a spade
    print("Probability of exactly one king or spade:", probability_either(king_count, spade_count, overlap_count, TOTAL_CARDS))

    # Q5: Probability of drawing two aces
    ace_count = 4
    print("Probability of two aces:", probability_k_cards(ace_count, TOTAL_CARDS, 2))

    # Q6: Probability of one heart and one club
    heart_count = 13
    club_count = 13
    overlap_count = 0
    print("Probability of one heart and one club:", probability_two_specific_cards(heart_count, club_count, overlap_count))